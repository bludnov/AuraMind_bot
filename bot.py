import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import google.generativeai as genai
from database import Database
from dotenv import load_dotenv
import os

load_dotenv()

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
SYSTEM_PROMPT = os.getenv("SYSTEM_PROMPT")

genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('models/gemini-2.5-flash-preview-05-20')

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
db = Database()

def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )
    return keyboard

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    db.add_user(
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    
    welcome_text = """
*–ü—Ä–∏–≤–µ—Ç!* üëã

–Ø *AuraMind* ‚Äî —Ç–≤–æ–π –ò–ò-–Ω–µ–π—Ä–æ–ø—Å–∏—Ö–æ–ª–æ–≥. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º –∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–≤–æ–∏—Ö —á—É–≤—Å—Ç–≤–∞—Ö.

*–ß—Ç–æ —è —É–º–µ—é:*
‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —ç–º–æ—Ü–∏—è—Ö
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤ —Ç—Ä—É–¥–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
‚Ä¢ –î–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –±–æ—Ä—å–±–µ —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º
‚Ä¢ –ë—ã—Ç—å —Ä—è–¥–æ–º 24/7

*–í–∞–∂–Ω–æ:* –í—Å–µ –Ω–∞—à–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–Ω—ã –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã.

–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üíô
"""
    await message.answer(welcome_text, parse_mode="Markdown", reply_markup=get_main_keyboard())

@dp.message(Command("menu"))
async def cmd_menu(message: types.Message):
    menu_text = """
*–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é* üì±

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    await message.answer(menu_text, parse_mode="Markdown", reply_markup=get_main_keyboard())

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = """
*ü§ñ AuraMind ‚Äî –≤–∞—à –ò–ò-–Ω–µ–π—Ä–æ–ø—Å–∏—Ö–æ–ª–æ–≥*

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ `/start` ‚Äî –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ
‚Ä¢ `/menu` ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ `/help` ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*
1. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
3. –Ø –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —á—É–≤—Å—Ç–≤–∞—Ö –∏ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º

*–í–∞–∂–Ω–æ:* 
‚Ä¢ –í—Å–µ –æ–±—â–µ–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–Ω–æ –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ
‚Ä¢ –Ø –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å —Å–æ –º–Ω–æ–π –æ –ª—é–±—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
"""
    await message.answer(help_text, parse_mode="Markdown")

@dp.message()
async def handle_message(message: types.Message):
    if message.text == "‚ùì –ü–æ–º–æ—â—å":
        await cmd_help(message)
        return

    db.add_message(message.from_user.id, message.text, is_bot=False)
    await bot.send_chat_action(chat_id=message.chat.id, action="typing")
    
    try:
        chat_history = db.get_chat_history(message.from_user.id)
        
        chat = model.start_chat(history=[])
        
        chat.send_message(SYSTEM_PROMPT)
        
        for msg_text, is_bot, _ in chat_history:
            chat.send_message(msg_text)
        
        response = chat.send_message(message.text)
        ai_response = response.text
        
        db.add_message(message.from_user.id, ai_response, is_bot=True)
        
        await message.reply(ai_response, parse_mode="Markdown")
    except Exception as e:
        logging.error(f"Error: {e}")
        error_msg = "*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.* ‚ùå"
        db.add_message(message.from_user.id, error_msg, is_bot=True)
        await message.reply(error_msg, parse_mode="Markdown")
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
