import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import requests
from database import Database
from subscription_db import SubscriptionDB
from dotenv import load_dotenv
import os
import sys

load_dotenv()

logging.basicConfig(level=logging.DEBUG, stream=sys.stdout)

BOT_TOKEN = os.getenv("BOT_TOKEN")
SYSTEM_PROMPT = os.getenv("SYSTEM_PROMPT")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_KEY")

LOCAL_API_URL = os.getenv("API_URL")
DEEPSEEK_API_URL = "https://api.deepseek.com/v1/chat/completions"

ADMIN_IDS = [int(id) for id in os.getenv("ADMIN_IDS").split(",")]

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
db = Database()
sub_db = SubscriptionDB()

user_settings = {}

admin_states = {}

def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")],
            [KeyboardButton(text="üéÅ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ")],
            [KeyboardButton(text="üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á")]
        ],
        resize_keyboard=True
    )
    return keyboard

def get_settings_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç", callback_data="age")],
            [InlineKeyboardButton(text="–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤", callback_data="style")],
            [InlineKeyboardButton(text="–î–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã", callback_data="advice")],
            [InlineKeyboardButton(text="–ü–æ–ª –±–æ—Ç–∞", callback_data="bot_gender")],
            [InlineKeyboardButton(text="–ú–æ–π –ø–æ–ª", callback_data="user_gender")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
    )
    return keyboard

def get_age_keyboard(user_id):
    current_age = user_settings[user_id]["age"] if user_id in user_settings else None
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=f"{'‚úÖ ' if current_age == '13-18' else ''}13-18 –ª–µ—Ç",
                callback_data="age_13_18"
            )],
            [InlineKeyboardButton(
                text=f"{'‚úÖ ' if current_age == '19-35' else ''}19-35 –ª–µ—Ç",
                callback_data="age_19_35"
            )],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_settings")]
        ]
    )
    return keyboard

def get_style_keyboard(user_id):
    current_style = user_settings[user_id]["style"] if user_id in user_settings else "short"
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=f"{'‚úÖ ' if current_style == 'short' else ''}–ö—Ä–∞—Ç–∫–æ",
                callback_data="style_short"
            )],
            [InlineKeyboardButton(
                text=f"{'‚úÖ ' if current_style == 'long' else ''}–†–∞–∑–≤—ë—Ä–Ω—É—Ç–æ",
                callback_data="style_long"
            )],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_settings")]
        ]
    )
    return keyboard

def get_advice_keyboard(user_id):
    current_advice = user_settings[user_id]["advice"] if user_id in user_settings else False
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=f"{'‚úÖ ' if current_advice else ''}–î–∞",
                callback_data="advice_yes"
            )],
            [InlineKeyboardButton(
                text=f"{'‚úÖ ' if not current_advice else ''}–ù–µ—Ç",
                callback_data="advice_no"
            )],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_settings")]
        ]
    )
    return keyboard

def get_bot_gender_keyboard(user_id):
    current_bot_gender = user_settings[user_id]["bot_gender"] if user_id in user_settings else None
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=f"{'‚úÖ ' if current_bot_gender == 'female' else ''}–ñ–µ–Ω—Å–∫–∏–π",
                callback_data="bot_gender_female"
            )],
            [InlineKeyboardButton(
                text=f"{'‚úÖ ' if current_bot_gender == 'male' else ''}–ú—É–∂—Å–∫–æ–π",
                callback_data="bot_gender_male"
            )],
            [InlineKeyboardButton(
                text=f"{'‚úÖ ' if current_bot_gender == 'neutral' else ''}–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π",
                callback_data="bot_gender_neutral"
            )],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_settings")]
        ]
    )
    return keyboard

def get_user_gender_keyboard(user_id):
    current_user_gender = user_settings[user_id]["user_gender"] if user_id in user_settings else None
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=f"{'‚úÖ ' if current_user_gender == 'female' else ''}–ñ–µ–Ω—Å–∫–∏–π",
                callback_data="user_gender_female"
            )],
            [InlineKeyboardButton(
                text=f"{'‚úÖ ' if current_user_gender == 'male' else ''}–ú—É–∂—Å–∫–æ–π",
                callback_data="user_gender_male"
            )],
            [InlineKeyboardButton(
                text=f"{'‚úÖ ' if current_user_gender == 'neutral' else ''}–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π",
                callback_data="user_gender_neutral"
            )],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_settings")]
        ]
    )
    return keyboard

def get_admin_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á", callback_data="admin_create_key")],
            [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á", callback_data="admin_delete_key")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
    )
    return keyboard

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    user_settings[user_id] = {
        "age": None,
        "style": "short",
        "advice": False,
        "bot_gender": "neutral",
        "user_gender": "neutral"
    }
    
    db.add_user(
        user_id=user_id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
        bot_gender="neutral",
        user_gender="neutral"
    )
    sub_db.add_user(user_id)
    
    welcome_text = """
*–ü—Ä–∏–≤–µ—Ç!* üëã 
–Ø *AuraMind*. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Å–ø–æ–∫–æ–π–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤—Å–µ–º, —á—Ç–æ —Ç–µ–±—è –≤–æ–ª–Ω—É–µ—Ç. –Ø –Ω–µ –¥–∞—é —Å–æ–≤–µ—Ç–æ–≤, –Ω–æ –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Ç–≤–æ–∏—Ö –º—ã—Å–ª—è—Ö. –ù–∞—á–Ω—É —Å —Ç–æ–≥–æ, —á—Ç–æ —Å–ø—Ä–æ—à—É: —á—Ç–æ —Å–µ–π—á–∞—Å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏, —á—Ç–æ –ø—Ä–∏–≤–µ–ª–æ —Ç–µ–±—è —Å—é–¥–∞? üíô

–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ –ø–æ–¥ —Å–µ–±—è –≤ –º–µ–Ω—é "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"

üéÅ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 3 –¥–Ω—è!

üîë –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫—É —Å –ø–æ–º–æ—â—å—é –∫–ª—é—á–∞!
"""
    await message.answer(welcome_text, parse_mode="Markdown", reply_markup=get_main_keyboard())

@dp.message(Command("menu"))
async def cmd_menu(message: types.Message):
    menu_text = """
*–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é* üì±

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    await message.answer(menu_text, parse_mode="Markdown", reply_markup=get_main_keyboard())

@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    user_id = message.from_user.id
    if user_id in ADMIN_IDS:
        await message.answer(
            "*–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞* üîí\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="Markdown",
            reply_markup=get_admin_keyboard()
        )
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = """
*üïäÔ∏è AuraMind ‚Äî –≤–∞—à –ò–ò-–ø—Å–∏—Ö–æ–ª–æ–≥*

‚Ä¢ –í—Å–µ –æ–±—â–µ–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–Ω–æ –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ
‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å —Å–æ –º–Ω–æ–π –æ –ª—é–±—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è –¥–ª—è –¥–µ—Ç–µ–π –∏ –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤: 8-800-2000-122
"""
    await message.answer(help_text, parse_mode="Markdown")

@dp.callback_query()
async def process_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id not in user_settings:
        user_settings[user_id] = {
            "age": None,
            "style": "short",
            "advice": False,
            "bot_gender": None,
            "user_gender": None
        }

    if callback_query.data == "age":
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:",
            reply_markup=get_age_keyboard(user_id)
        )
    elif callback_query.data.startswith("age_"):
        age_range = callback_query.data.split("_")[1:]
        user_settings[user_id]["age"] = f"{age_range[0]}-{age_range[1]}"
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:",
            reply_markup=get_age_keyboard(user_id)
        )
    elif callback_query.data == "style":
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤:",
            reply_markup=get_style_keyboard(user_id)
        )
    elif callback_query.data.startswith("style_"):
        style = callback_query.data.split("_")[1]
        user_settings[user_id]["style"] = style
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤:",
            reply_markup=get_style_keyboard(user_id)
        )
    elif callback_query.data == "advice":
        await callback_query.message.edit_text(
            "–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø–æ–ª—É—á–∞—Ç—å —Å–æ–≤–µ—Ç—ã?",
            reply_markup=get_advice_keyboard(user_id)
        )
    elif callback_query.data.startswith("advice_"):
        advice = callback_query.data.split("_")[1] == "yes"
        user_settings[user_id]["advice"] = advice
        await callback_query.message.edit_text(
            "–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø–æ–ª—É—á–∞—Ç—å —Å–æ–≤–µ—Ç—ã?",
            reply_markup=get_advice_keyboard(user_id)
        )
    elif callback_query.data == "bot_gender":
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –±–æ—Ç–∞:",
            reply_markup=get_bot_gender_keyboard(user_id)
        )
    elif callback_query.data.startswith("bot_gender_"):
        bot_gender = callback_query.data.split("_")[2]
        user_settings[user_id]["bot_gender"] = bot_gender
        db.update_user_setting(user_id, "bot_gender", bot_gender)
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –±–æ—Ç–∞:",
            reply_markup=get_bot_gender_keyboard(user_id)
        )
    elif callback_query.data == "user_gender":
        await callback_query.message.edit_text(
            "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
            reply_markup=get_user_gender_keyboard(user_id)
        )
    elif callback_query.data.startswith("user_gender_"):
        user_gender = callback_query.data.split("_")[2]
        user_settings[user_id]["user_gender"] = user_gender
        db.update_user_setting(user_id, "user_gender", user_gender)
        await callback_query.message.edit_text(
            "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
            reply_markup=get_user_gender_keyboard(user_id)
        )
    elif callback_query.data == "back_to_settings":
        await callback_query.message.edit_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            reply_markup=get_settings_keyboard()
        )
    elif callback_query.data == "back_to_main":
        await callback_query.message.delete()
        await callback_query.message.answer(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
            reply_markup=get_main_keyboard()
        )
    elif callback_query.data == "admin_create_key":
        if user_id in ADMIN_IDS:
            new_key = sub_db.create_activation_key()
            await callback_query.message.answer(f"üîë –ù–æ–≤—ã–π –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: `{new_key}`", parse_mode="Markdown")
        else:
            await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
    elif callback_query.data == "admin_delete_key":
        if user_id in ADMIN_IDS:
            admin_states[user_id] = "waiting_for_key_to_delete"
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
        else:
            await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")

@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id

    if user_id in ADMIN_IDS and admin_states.get(user_id) == "waiting_for_key_to_delete":
        key_to_delete = message.text.strip()
        if sub_db.delete_activation_key(key_to_delete):
            await message.answer(f"–ö–ª—é—á `{key_to_delete}` —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", parse_mode="Markdown")
        else:
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á `{key_to_delete}`. –í–æ–∑–º–æ–∂–Ω–æ, –µ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.", parse_mode="Markdown")
        admin_states.pop(user_id, None) 
        return

    if message.text == "‚ùì –ü–æ–º–æ—â—å":
        await cmd_help(message)
        return
    elif message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await message.answer(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            reply_markup=get_settings_keyboard()
        )
        return
    elif message.text == "üéÅ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ":
        user_id = message.from_user.id
        if sub_db.activate_trial(user_id):
            days_left = sub_db.get_trial_days_left(user_id)
            await message.answer(
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ {days_left} –¥–Ω–µ–π!",
                reply_markup=get_main_keyboard()
            )
        else:
            await message.answer(
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.",
                reply_markup=get_main_keyboard()
            )
        return
    elif message.text == "üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: `/activate –í–ê–®_–ö–õ–Æ–ß`", parse_mode="Markdown")
        return
    elif message.text and message.text.startswith("/activate "):
        activation_key = message.text.split(" ", 1)[1].strip()
        if sub_db.activate_premium(user_id, activation_key):
            await message.answer("‚úÖ –í–∞—à –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", reply_markup=get_main_keyboard())
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏–ª–∏ –æ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.", reply_markup=get_main_keyboard())
        return

    try:
        if not sub_db.check_subscription(user_id):
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫—É.",
                reply_markup=get_main_keyboard()
            )
            return

        if user_id not in user_settings:
            user_settings[user_id] = {
                "age": None,
                "style": "short",
                "advice": False,
                "bot_gender": None,
                "user_gender": None
            }
        
        db_settings = db.get_user_settings(user_id)
        if db_settings:
            user_settings[user_id]["bot_gender"] = db_settings[0]
            user_settings[user_id]["user_gender"] = db_settings[1]

        db.add_message(user_id, message.text, is_bot=False)
        await bot.send_chat_action(chat_id=message.chat.id, action="typing")
        
        chat_history = db.get_chat_history(user_id)
        
        prompt = ""
        if SYSTEM_PROMPT:
            prompt += f"{SYSTEM_PROMPT}\n\n"
            
        settings = user_settings[user_id]
        prompt += f"–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n"
        if settings["age"]:
            prompt += f"–í–æ–∑—Ä–∞—Å—Ç: {settings['age']}\n"
        if settings["style"]:
            prompt += f"–û–Ω —Ö–æ—á–µ—Ç —á—Ç–æ–±—ã —Ç—ã –æ—Ç–≤–µ—á–∞–ª: {'–ö—Ä–∞—Ç–∫–æ' if settings['style'] == 'short' else '–†–∞–∑–≤—ë—Ä–Ω—É—Ç–æ'}\n"
        if settings["advice"] is not None:
            prompt += f"–•–æ—á–µ—Ç –ª–∏ –æ–Ω —á—Ç–æ–±—ã —Ç—ã –¥–∞–≤–∞–ª —Å–æ–≤–µ—Ç—ã: {'–î–∞' if settings['advice'] else '–ù–µ—Ç'}\n"
            
        if settings["bot_gender"]:
            bot_gender_ru = "–∂–µ–Ω—Å–∫–∏–π" if settings["bot_gender"] == "female" else \
                            "–º—É–∂—Å–∫–æ–π" if settings["bot_gender"] == "male" else \
                            "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"
            prompt += f"–ü–æ–ª –±–æ—Ç–∞: {bot_gender_ru}\n"
            
        if settings["user_gender"]:
            user_gender_ru = "–∂–µ–Ω—Å–∫–∏–π" if settings["user_gender"] == "female" else \
                             "–º—É–∂—Å–∫–æ–π" if settings["user_gender"] == "male" else \
                             "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"
            prompt += f"–ü–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_gender_ru}\n"

        if settings["bot_gender"] == "neutral" or settings["user_gender"] == "neutral":
            prompt += "–°–æ—Å—Ç–∞–≤–ª—è–π –æ—Ç–≤–µ—Ç—ã —Ç–∞–∫, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª –ø–æ–Ω—è—Ç–µ–Ω —Ç–≤–æ–π –ø–æ–ª –∏ –ø–æ–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.\n"

        prompt += "\n"

        for msg_text, is_bot, _ in chat_history[-5:]:
            role = "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç" if is_bot else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            prompt += f"{role}: {msg_text}\n"
        
        prompt += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.text}\n–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:"
        
        try:
            response = requests.post(
                f"{LOCAL_API_URL}/v1/completions",
                json={
                    "model": "google/gemma-3-12b",
                    "prompt": prompt,
                    "temperature": 0.7,
                    "max_tokens": 1000,
                    "top_p": 0.9,
                    "frequency_penalty": 0.0,
                    "presence_penalty": 0.0,
                    "stop": ["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", "–°–∏—Å—Ç–µ–º–∞:"]
                },
                headers={
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                },
                timeout=10
            )
            
            if response.status_code != 200:
                raise Exception(f"Local API returned {response.status_code}")
                
        except Exception as e:
            logging.warning(f"Local API failed, falling back to DeepSeek: {str(e)}")
            response = requests.post(
                DEEPSEEK_API_URL,
                json={
                    "model": "deepseek-chat",
                    "messages": [
                        {"role": "system", "content": SYSTEM_PROMPT if SYSTEM_PROMPT else ""},
                        {"role": "user", "content": message.text}
                    ],
                    "temperature": 0.7,
                    "max_tokens": 1000
                },
                headers={
                    "Content-Type": "application/json",
                    "Authorization": f"Bearer {DEEPSEEK_API_KEY}"
                }
            )
        
        if response.status_code == 200:
            response_data = response.json()
            
            if "choices" in response_data and len(response_data["choices"]) > 0:
                if "text" in response_data["choices"][0]:
                    full_response = response_data["choices"][0]["text"].strip()
                else:
                    full_response = response_data["choices"][0]["message"]["content"].strip()
                
                if full_response:
                    parts = full_response.split("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:", 1)
                    ai_response = parts[-1].strip() if len(parts) > 1 else full_response
                    logging.info(f"–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ò–ò: {ai_response}")
                    db.add_message(user_id, ai_response, is_bot=True)
                    ai_response = ai_response.replace('*', '\\*').replace('_', '\\_').replace('[', '\\[').replace('`', '\\`')
                    await message.reply(ai_response, parse_mode="Markdown")
                    return
                else:
                    raise Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏")
            else:
                raise Exception("–ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞")
        else:
            raise Exception(f"API –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}: {response.text}")
            
    except Exception as e:
        logging.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}")
        error_msg = "*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.* ‚ùå"
        db.add_message(message.from_user.id, error_msg, is_bot=True)
        await message.reply(error_msg, parse_mode="Markdown")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
